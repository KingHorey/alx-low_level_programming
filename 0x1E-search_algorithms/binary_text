#include "search_algos.h"

/**
 * binary_search - makes uses of binary search to get the specified value
 *
 * @array: sorted array to be used for searching
 * @size: size of the array
 * @value: number to be searched
 *
 * Return: searched value or -1 if not found
 */
int binary_search(int *array, size_t size, int value)
{
	if (array == NULL)
		return (-1);
	if (size <= 0)
		return (-1);
	return (get_value(array, size, value));

}

/**
 * get_value - gets the value of the array
 *
 * @array: sorted array to be used for searching
 * @size: size of the array
 * @value: number to be searched
 *
 * Return: searched value or -1 if not found
 */

int get_value(int *array, size_t size, int value)
{
	int mid, i, new_size;

	if (array == NULL)
		return (-1);

	if (size % 2 == 0)
	{
		if (size == 2)
		{
			mid = size / 2;
			new_size = 1;
		}
		else
		{
			mid = (size / 2) - 1;
			new_size = size - (size / 2);
		}
	}
	else if (size % 2 != 0)
	{
		mid = size / 2;
		new_size = size - (size / 2);
		new_size = new_size - 1;
	}


	printf("Searching in the array: ");
	i = 0;
	while (i < (int) size)
	{
		if (i == (int) size - 1)
			printf("%d \n", array[i]);
		else
			printf("%d, ", array[i]);
		i++;
	}

	if (value > array[mid])
	{
		if (size % 2 != 0)
		{
			new_size = new_size + 1;
			return get_value(&array[new_size], new_size - 1, value);
		}
		return get_value(&array[new_size], new_size, value);
	}
	if (value < array[mid])
	{
		return get_value(array, new_size - 1, value);
	}
	return (-1);
}
